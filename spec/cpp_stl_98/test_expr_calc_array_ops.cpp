// Autogenerated from KST: please remove this line if doing any edits by hand!

#include <boost/test/unit_test.hpp>
#include "expr_calc_array_ops.h"
#include <iostream>
#include <fstream>
#include <vector>

BOOST_AUTO_TEST_CASE(test_expr_calc_array_ops) {
    std::ifstream ifs("src/fixed_struct.bin", std::ifstream::binary);
    kaitai::kstream ks(&ifs);
    expr_calc_array_ops_t* r = new expr_calc_array_ops_t(&ks);

    BOOST_CHECK_EQUAL(r->int_array_size(), 7);
    BOOST_CHECK_EQUAL(r->int_array_first(), 10);
    BOOST_CHECK_EQUAL(r->int_array_mid(), 25);
    BOOST_CHECK_EQUAL(r->int_array_last(), 1000);
    BOOST_CHECK_EQUAL(r->int_array_min(), 10);
    BOOST_CHECK_EQUAL(r->int_array_max(), 1000);
    BOOST_CHECK_EQUAL(r->double_array_size(), 5);
    BOOST_CHECK_CLOSE(r->double_array_first(), 10.0, 1e-4);
    BOOST_CHECK_CLOSE(r->double_array_mid(), 25.0, 1e-4);
    BOOST_CHECK_CLOSE(r->double_array_last(), 3.14159, 1e-4);
    BOOST_CHECK_CLOSE(r->double_array_min(), 3.14159, 1e-4);
    BOOST_CHECK_CLOSE(r->double_array_max(), 100.0, 1e-4);
    BOOST_CHECK_EQUAL(r->str_array_size(), 4);
    BOOST_CHECK_EQUAL(r->str_array_first(), std::string("un"));
    BOOST_CHECK_EQUAL(r->str_array_mid(), std::string("deux"));
    BOOST_CHECK_EQUAL(r->str_array_last(), std::string("quatre"));
    BOOST_CHECK_EQUAL(r->str_array_min(), std::string("deux"));
    BOOST_CHECK_EQUAL(r->str_array_max(), std::string("un"));

    delete r;
}
