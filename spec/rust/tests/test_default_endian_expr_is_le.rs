// Autogenerated from KST: please remove this line if doing any edits by hand!

use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::default_endian_expr_is_le::*;

#[test]
fn test_default_endian_expr_is_le() -> KResult<()> {
    let bytes = fs::read("../../src/endian_expr.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let r: OptRc<DefaultEndianExprIsLe> = DefaultEndianExprIsLe::read_into(&_io, None, None)?;

    assert_eq!(*r.docs()[0 as usize].indicator(), vec![0x49u8, 0x49u8]);
    assert_eq!(*r.docs()[0 as usize].main().some_int(), 66);
    assert_eq!(*r.docs()[0 as usize].main().some_int_be(), 66);
    assert_eq!(*r.docs()[0 as usize].main().some_int_le(), 66);
    assert_eq!(*r.docs()[1 as usize].indicator(), vec![0x4du8, 0x4du8]);
    assert_eq!(*r.docs()[1 as usize].main().some_int(), 66);
    assert_eq!(*r.docs()[1 as usize].main().some_int_be(), 66);
    assert_eq!(*r.docs()[1 as usize].main().some_int_le(), 66);
    assert_eq!(*r.docs()[2 as usize].indicator(), vec![0x58u8, 0x58u8]);
    assert_eq!(*r.docs()[2 as usize].main().some_int(), 66);
    assert_eq!(*r.docs()[2 as usize].main().some_int_be(), 66);
    assert_eq!(*r.docs()[2 as usize].main().some_int_le(), 66);
    Ok(())
}
