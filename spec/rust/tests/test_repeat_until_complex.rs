// Autogenerated from KST: please remove this line if doing any edits by hand!

use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::repeat_until_complex::*;

#[test]
fn test_repeat_until_complex() -> KResult<()> {
    let bytes = fs::read("../../src/repeat_until_complex.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let r: OptRc<RepeatUntilComplex> = RepeatUntilComplex::read_into(&_io, None, None)?;

    assert_eq!(r.first().len(), 3);
    assert_eq!(*r.first()[0 as usize].count(), 4);
    assert_eq!(*r.first()[0 as usize].values(), vec![(0 + 1), 2, 3, 4]);
    assert_eq!(*r.first()[1 as usize].count(), 2);
    assert_eq!(*r.first()[1 as usize].values(), vec![(0 + 1), 2]);
    assert_eq!(*r.first()[2 as usize].count(), 0);
    assert_eq!(r.second().len(), 4);
    assert_eq!(*r.second()[0 as usize].count(), 6);
    assert_eq!(*r.second()[0 as usize].values(), vec![(0 + 1), 2, 3, 4, 5, 6]);
    assert_eq!(*r.second()[1 as usize].count(), 3);
    assert_eq!(*r.second()[1 as usize].values(), vec![(0 + 1), 2, 3]);
    assert_eq!(*r.second()[2 as usize].count(), 4);
    assert_eq!(*r.second()[2 as usize].values(), vec![(0 + 1), 2, 3, 4]);
    assert_eq!(*r.second()[3 as usize].count(), 0);
    assert_eq!(*r.third(), vec![(0 + 102), 111, 111, 98, 97, 114, 0]);
    Ok(())
}
