# Autogenerated from KST: please remove this line if doing any edits by hand!

package spec::perl::TestExprCalcArrayOps;

use strict;
use warnings;
use base qw(Test::Class);
use Test::More;
use ExprCalcArrayOps;

sub test_expr_calc_array_ops: Test(18) {
    my $r = ExprCalcArrayOps->from_file('src/fixed_struct.bin');

    is($r->int_array_size(), 7, 'Equals');
    is($r->int_array_first(), 10, 'Equals');
    is($r->int_array_mid(), 25, 'Equals');
    is($r->int_array_last(), 1000, 'Equals');
    is($r->int_array_min(), 10, 'Equals');
    is($r->int_array_max(), 1000, 'Equals');
    is($r->double_array_size(), 5, 'Equals');
    ok(abs($r->double_array_first() - 10.0) < 1e-6, 'Approx equals');
    ok(abs($r->double_array_mid() - 25.0) < 1e-6, 'Approx equals');
    ok(abs($r->double_array_last() - 3.14159) < 1e-6, 'Approx equals');
    ok(abs($r->double_array_min() - 3.14159) < 1e-6, 'Approx equals');
    ok(abs($r->double_array_max() - 100.0) < 1e-6, 'Approx equals');
    is($r->str_array_size(), 4, 'Equals');
    is($r->str_array_first(), "un", 'Equals');
    is($r->str_array_mid(), "deux", 'Equals');
    is($r->str_array_last(), "quatre", 'Equals');
    is($r->str_array_min(), "deux", 'Equals');
    is($r->str_array_max(), "un", 'Equals');
}

Test::Class->runtests;
