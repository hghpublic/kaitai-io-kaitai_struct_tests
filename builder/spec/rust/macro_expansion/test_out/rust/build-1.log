{"reason":"compiler-artifact","package_id":"path+file:///mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust#0.0.0","manifest_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust","src_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/target/debug/deps/librust-5cc6c6ffe0c910dd.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-message","package_id":"path+file:///mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust#0.0.0","manifest_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/Cargo.toml","target":{"kind":["test"],"crate_types":["bin"],"name":"spec","src_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/tests/spec.rs","edition":"2018","doc":false,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: can't compare `{integer}` with `{float}`\n --> tests/test_nested.rs:7:5\n  |\n7 |     our_assert_eq_wrapper!(4, 2.5);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `{integer} == {float}`\n  |\n  = help: the trait `PartialEq<{float}>` is not implemented for `{integer}`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n            isize\n            i8\n            i16\n            i32\n            i64\n            i128\n            usize\n            u8\n          and 6 others\n  = note: this error originates in the macro `assert_eq` which comes from the expansion of the macro `our_assert_eq_wrapper` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `PartialEq<{float}>` is not implemented for `{integer}`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `PartialEq<Rhs>`:\n  isize\n  i8\n  i16\n  i32\n  i64\n  i128\n  usize\n  u8\nand 6 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"can't compare `{integer}` with `{float}`","spans":[{"byte_end":1242,"byte_start":1240,"column_end":34,"column_start":32,"expansion":{"def_site_span":{"byte_end":1092,"byte_start":1070,"column_end":23,"column_start":1,"expansion":null,"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","is_primary":false,"label":null,"line_end":36,"line_start":36,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"assert_eq!","span":{"byte_end":95,"byte_start":77,"column_end":80,"column_start":62,"expansion":{"def_site_span":{"byte_end":50,"byte_start":16,"column_end":35,"column_start":1,"expansion":null,"file_name":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/src/helpers.rs","is_primary":false,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":1,"text":"macro_rules! our_assert_eq_wrapper { ($l:expr, $r:expr) => { assert_eq!($l, $r) } }"}]},"macro_decl_name":"our_assert_eq_wrapper!","span":{"byte_end":243,"byte_start":213,"column_end":35,"column_start":5,"expansion":null,"file_name":"tests/test_nested.rs","is_primary":false,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":5,"text":"    our_assert_eq_wrapper!(4, 2.5);"}]}},"file_name":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/src/helpers.rs","is_primary":false,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":62,"text":"macro_rules! our_assert_eq_wrapper { ($l:expr, $r:expr) => { assert_eq!($l, $r) } }"}]}},"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","is_primary":true,"label":"no implementation for `{integer} == {float}`","line_end":40,"line_start":40,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust#0.0.0","manifest_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/Cargo.toml","target":{"kind":["test"],"crate_types":["bin"],"name":"spec","src_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/tests/spec.rs","edition":"2018","doc":false,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n --> tests/test_nested.rs:7:5\n  |\n7 |     our_assert_eq_wrapper!(4, 2.5);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer, found floating-point number\n  |\n  = note: this error originates in the macro `assert_eq` which comes from the expansion of the macro `our_assert_eq_wrapper` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1253,"byte_start":1243,"column_end":45,"column_start":35,"expansion":{"def_site_span":{"byte_end":1092,"byte_start":1070,"column_end":23,"column_start":1,"expansion":null,"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","is_primary":false,"label":null,"line_end":36,"line_start":36,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"assert_eq!","span":{"byte_end":95,"byte_start":77,"column_end":80,"column_start":62,"expansion":{"def_site_span":{"byte_end":50,"byte_start":16,"column_end":35,"column_start":1,"expansion":null,"file_name":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/src/helpers.rs","is_primary":false,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":1,"text":"macro_rules! our_assert_eq_wrapper { ($l:expr, $r:expr) => { assert_eq!($l, $r) } }"}]},"macro_decl_name":"our_assert_eq_wrapper!","span":{"byte_end":243,"byte_start":213,"column_end":35,"column_start":5,"expansion":null,"file_name":"tests/test_nested.rs","is_primary":false,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":5,"text":"    our_assert_eq_wrapper!(4, 2.5);"}]}},"file_name":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/src/helpers.rs","is_primary":false,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":62,"text":"macro_rules! our_assert_eq_wrapper { ($l:expr, $r:expr) => { assert_eq!($l, $r) } }"}]}},"file_name":"/rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/macros/mod.rs","is_primary":true,"label":"expected integer, found floating-point number","line_end":40,"line_start":40,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust#0.0.0","manifest_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/Cargo.toml","target":{"kind":["test"],"crate_types":["bin"],"name":"spec","src_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/tests/spec.rs","edition":"2018","doc":false,"doctest":false,"test":true},"message":{"rendered":"error: aborting due to 2 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 2 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust#0.0.0","manifest_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/Cargo.toml","target":{"kind":["test"],"crate_types":["bin"],"name":"spec","src_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/tests/spec.rs","edition":"2018","doc":false,"doctest":false,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0277, E0308.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0277, E0308.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust#0.0.0","manifest_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/Cargo.toml","target":{"kind":["test"],"crate_types":["bin"],"name":"spec","src_path":"/mnt/c/temp/kaitai_struct/tests/builder/spec/rust/macro_expansion/spec/rust/tests/spec.rs","edition":"2018","doc":false,"doctest":false,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0277`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0277`.","spans":[]}}
{"reason":"build-finished","success":false}
