<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: /home/travis/build/kaitai-io/ci_targets/tests/compiled/cpp_stl_11/bin/ks_tests</line>
</preamble>

<pid>7544</pid>
<ppid>7543</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--leak-check=full</arg>
    <arg>--xml=yes</arg>
    <arg>--xml-file=test_out/cpp_stl_11/valgrind.xml</arg>
  </vargv>
  <argv>
    <exe>/home/travis/build/kaitai-io/ci_targets/tests/compiled/cpp_stl_11/bin/ks_tests</exe>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.420 </time>
</status>

<error>
  <unique>0x0</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x734736</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>valid_not_parsed_if_t::_read()</fn>
      <dir>/home/travis/build/kaitai-io/ci_targets/tests/compiled/cpp_stl_11</dir>
      <file>valid_not_parsed_if.cpp</file>
      <line>20</line>
    </frame>
    <frame>
      <ip>0x7346DA</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>valid_not_parsed_if_t::valid_not_parsed_if_t(kaitai::kstream*, kaitai::kstruct*, valid_not_parsed_if_t*)</fn>
      <dir>/home/travis/build/kaitai-io/ci_targets/tests/compiled/cpp_stl_11</dir>
      <file>valid_not_parsed_if.cpp</file>
      <line>11</line>
    </frame>
    <frame>
      <ip>0x67B4F0</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>test_valid_not_parsed_if::test_method()</fn>
      <dir>/home/travis/build/kaitai-io/ci_targets/tests/spec/cpp_stl_11</dir>
      <file>test_valid_not_parsed_if.cpp</file>
      <line>12</line>
    </frame>
    <frame>
      <ip>0x67B450</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>test_valid_not_parsed_if_invoker()</fn>
      <dir>/home/travis/build/kaitai-io/ci_targets/tests/spec/cpp_stl_11</dir>
      <file>test_valid_not_parsed_if.cpp</file>
      <line>9</line>
    </frame>
    <frame>
      <ip>0x610C05</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>boost::unit_test::ut_detail::unused boost::unit_test::ut_detail::invoker&lt;boost::unit_test::ut_detail::unused&gt;::invoke&lt;void (*)()&gt;(void (*&amp;)())</fn>
    </frame>
    <frame>
      <ip>0x610BC7</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>boost::unit_test::ut_detail::callback0_impl_t&lt;boost::unit_test::ut_detail::unused, void (*)()&gt;::invoke()</fn>
    </frame>
    <frame>
      <ip>0x4E9F1F0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
    </frame>
    <frame>
      <ip>0x4E7A545</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::execution_monitor::catch_signals(boost::unit_test::callback0&lt;int&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4E7AD82</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::execution_monitor::execute(boost::unit_test::callback0&lt;int&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4E9F2F1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::unit_test::unit_test_monitor_t::execute_and_translate(boost::unit_test::test_case const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4E88F93</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::unit_test::framework_impl::visit(boost::unit_test::test_case const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4EB7D22</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::unit_test::traverse_test_tree(boost::unit_test::test_suite const&amp;, boost::unit_test::test_tree_visitor&amp;)</fn>
    </frame>
  </stack>
</error>


<status>
  <state>FINISHED</state>
  <time>00:00:00:07.009 </time>
</status>

<error>
  <unique>0x6</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>415 (384 direct, 31 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 10</text>
    <leakedbytes>415</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x4C2B0E0</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x766550</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>eos_exception_bytes_t::_read()</fn>
      <dir>/home/travis/build/kaitai-io/ci_targets/tests/compiled/cpp_stl_11</dir>
      <file>eos_exception_bytes.cpp</file>
      <line>18</line>
    </frame>
    <frame>
      <ip>0x7664A7</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>eos_exception_bytes_t::eos_exception_bytes_t(kaitai::kstream*, kaitai::kstruct*, eos_exception_bytes_t*)</fn>
      <dir>/home/travis/build/kaitai-io/ci_targets/tests/compiled/cpp_stl_11</dir>
      <file>eos_exception_bytes.cpp</file>
      <line>13</line>
    </frame>
    <frame>
      <ip>0x67DE30</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>test_eos_exception_bytes::test_method()</fn>
      <dir>/home/travis/build/kaitai-io/ci_targets/tests/spec/cpp_stl_11</dir>
      <file>test_eos_exception_bytes.cpp</file>
      <line>14</line>
    </frame>
    <frame>
      <ip>0x67DD10</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>test_eos_exception_bytes_invoker()</fn>
      <dir>/home/travis/build/kaitai-io/ci_targets/tests/spec/cpp_stl_11</dir>
      <file>test_eos_exception_bytes.cpp</file>
      <line>10</line>
    </frame>
    <frame>
      <ip>0x610C05</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>boost::unit_test::ut_detail::unused boost::unit_test::ut_detail::invoker&lt;boost::unit_test::ut_detail::unused&gt;::invoke&lt;void (*)()&gt;(void (*&amp;)())</fn>
    </frame>
    <frame>
      <ip>0x610BC7</ip>
      <obj>/home/travis/build/kaitai-io/ci_targets/compiled/cpp_stl_11/bin/ks_tests</obj>
      <fn>boost::unit_test::ut_detail::callback0_impl_t&lt;boost::unit_test::ut_detail::unused, void (*)()&gt;::invoke()</fn>
    </frame>
    <frame>
      <ip>0x4E9F1F0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
    </frame>
    <frame>
      <ip>0x4E7A545</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::execution_monitor::catch_signals(boost::unit_test::callback0&lt;int&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4E7AD82</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::execution_monitor::execute(boost::unit_test::callback0&lt;int&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4E9F2F1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::unit_test::unit_test_monitor_t::execute_and_translate(boost::unit_test::test_case const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4E88F93</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::unit_test::framework_impl::visit(boost::unit_test::test_case const&amp;)</fn>
    </frame>
  </stack>
</error>

<!--
  Lines 206-537 of the original log have been omitted:
  https://github.com/kaitai-io/ci_artifacts/blob/cd0ed47c0ac3cd064cb8b87da03534d6ff005048/test_out/cpp_stl_11/valgrind.xml#L206-L537

  This is because they were essentially identical to the leak in `eos_exception_bytes.cpp` above.
-->

<errorcounts>
  <pair>
    <count>1</count>
    <unique>0x0</unique>
  </pair>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>
